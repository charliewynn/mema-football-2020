{"version":3,"sources":["Components/FooComponent.tsx","Components/HomeComponent.tsx","Components/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["title","paragraph","useState","signedIn","setSignedIn","user","setUser","firebase","onAuthStateChanged","console","log","displayName","uiConfig","signInFlow","signInOptions","EmailAuthProvider","PROVIDER_ID","credentialHelper","id","onClick","signOut","firebaseAuth","App","className","basename","process","to","exact","path","component","Home","props","Foo","Login","render","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ref","push","set","Date","toLocaleString","then","snapshot","error","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAOe,kBAAGA,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACb,sCAEE,4BAAKD,GACL,2BAAIC,KCJO,kBAAGD,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACb,oCAEE,4BAAKD,GACL,2BAAIC,K,wCCAO,cAAsC,EAAnCD,MAAmC,EAA5BC,UAA6B,IAAD,EACnBC,oBAAS,GADU,mBAC5CC,EAD4C,KAClCC,EADkC,OAE3BF,mBAAS,IAFkB,mBAE5CG,EAF4C,KAEtCC,EAFsC,KAGnDC,SAAgBC,oBAAmB,SAAAH,GACjCI,QAAQC,IAAI,OAAQL,GACpBC,GAAY,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMM,cAAe,IAC7BP,IAAcC,MAEhB,IAAMO,EAAW,CACfC,WAAY,QACZC,cAAe,CAACP,OAAcQ,kBAAkBC,aAChDC,iBAAkB,QAEpB,OACE,yBAAKC,GAAG,iBACLf,EACC,oCACOE,EACL,4BAAQc,QAAS,kBAAMZ,SAAgBa,YAAvC,aAGF,kBAAC,IAAD,CACER,SAAUA,EACVS,aAAcd,aCSTe,EApCO,WACpB,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAeC,SAAUC,uBACvB,4BAAQF,UAAU,cAChB,kBAAC,IAAD,CAAMA,UAAU,aAAaG,GAAG,KAAhC,2BAGA,kBAAC,IAAD,CAAMA,GAAG,QAAT,QAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,UAAWC,EACXC,MAAO,CAAE/B,MAAO,QAChBA,MAAM,UAER,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,OAAOC,UAAWG,IACpC,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,SAASC,UAAWI,IACtC,kBAAC,IAAD,CACEC,OAAQ,kBACN,mCAEE,6BACE,kBAAC,IAAD,CAAMR,GAAG,KAAT,oBCpBES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCANhC,gBAVuB,CACrBiC,OAAQ,0CACRC,WAAY,0CACZC,YAAa,iDACbC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,eACnBC,MAAO,8CAIQvC,aAEdwC,IAAI,YACJC,OACAC,KAAI,IAAIC,MAAOC,kBACfC,MACC,SAAAC,GACE5C,QAAQC,IAAI,KAAM2C,MAEpB,SAAAC,GACE7C,QAAQC,IAAI,QAAS4C,MAI3BC,IAASrB,OAAO,kBAAC,EAAD,MAASsB,SAASC,eAAe,SD0G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMR,MAAK,SAAAS,GACjCA,EAAaC,kB","file":"static/js/main.56b5c6dc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype FooProps = {\r\n  title: string;\r\n  paragraph: string;\r\n};\r\n\r\nexport default ({ title, paragraph }: FooProps) => (\r\n  <div>\r\n    FOOFOO\r\n    <h2>{title}</h2>\r\n    <p>{paragraph}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\n\r\ntype HomeProps = {\r\n  title: string;\r\n  paragraph: string;\r\n};\r\n\r\nexport default ({ title, paragraph }: HomeProps) => (\r\n  <div>\r\n    HOME\r\n    <h2>{title}</h2>\r\n    <p>{paragraph}</p>\r\n  </div>\r\n);\r\n","import React, { useState } from \"react\";\r\n\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\r\n\r\ntype LoginProps = {\r\n  title: string;\r\n  paragraph: string;\r\n};\r\n\r\nexport default ({ title, paragraph }: LoginProps) => {\r\n  const [signedIn, setSignedIn] = useState(false);\r\n  const [user, setUser] = useState(\"\");\r\n  firebase.auth().onAuthStateChanged(user => {\r\n    console.log(\"User\", user);\r\n    setUser(user?.displayName || \"\");\r\n    setSignedIn(!!user);\r\n  });\r\n  const uiConfig = {\r\n    signInFlow: \"popup\",\r\n    signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID],\r\n    credentialHelper: \"none\"\r\n  };\r\n  return (\r\n    <div id=\"firebase_auth\">\r\n      {signedIn ? (\r\n        <div>\r\n          hey {user}\r\n          <button onClick={() => firebase.auth().signOut()}>Sign-out</button>\r\n        </div>\r\n      ) : (\r\n        <StyledFirebaseAuth\r\n          uiConfig={uiConfig}\r\n          firebaseAuth={firebase.auth()}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport Foo from \"./Components/FooComponent\";\nimport Home from \"./Components/HomeComponent\";\nimport Login from \"./Components/Login\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <header className=\"App-header\">\n          <Link className=\"HeaderLink\" to=\"/\">\n            Mema Football Pool 2020\n          </Link>\n          <Link to=\"/foo\">foo</Link>\n        </header>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={Home}\n            props={{ title: \"test\" }}\n            title=\"test2\"\n          />\n          <Route exact path=\"/foo\" component={Foo} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route\n            render={() => (\n              <div>\n                404\n                <div>\n                  <Link to=\"/\">Go Home</Link>\n                </div>\n              </div>\n            )}\n          />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDfbYR70N_1Z1d1HRl5qi-6j6gRMdxUiKk\",\n  authDomain: \"mema-football-pool-2020.firebaseapp.com\",\n  databaseURL: \"https://mema-football-pool-2020.firebaseio.com\",\n  projectId: \"mema-football-pool-2020\",\n  storageBucket: \"mema-football-pool-2020.appspot.com\",\n  messagingSenderId: \"703783527393\",\n  appId: \"1:703783527393:web:641d060dba257ff2dda8a0\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst database = firebase.database();\ndatabase\n  .ref(\"launches\")\n  .push()\n  .set(new Date().toLocaleString())\n  .then(\n    snapshot => {\n      console.log(\"SS\", snapshot);\n    },\n    error => {\n      console.log(\"Error\", error);\n    }\n  );\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}